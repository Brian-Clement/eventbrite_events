<?php

use Drupal\Core\Database\Database;

/**
 * Change length of a varchar entity field with data, safe with entity-updates.
 *
 * This updates the storage schema, the database schema, and the last
 * installed schema.
 *
 * The entity schema must also be changed in code in the entities
 * baseFieldDefinitions() or in an alter.
 *
 * @param string $entity_type_id
 *   The entity type.
 * @param string $field_name
 *   The field name to change.
 * @param int $field_length
 *   The new length of the field, must be larger than the previous value.
 * @param string $default_value
 *   The default value of the field.
 *
 * See @link https://www.drupal.org/docs/8/api/update-api/updating-database-schema-andor-data-in-drupal-8
 */
function db_change_varchar_field($entity_type_id, $field_name, $field_length, $default_value = '') {
  // Ignore entity manager caches.
  /** @var \Drupal\Core\Entity\EntityManager $entity_manager */
  $entity_manager = \Drupal::service('entity.manager');
  $entity_manager->useCaches(FALSE);

  /** @var \Drupal\Core\Entity\EntityLastInstalledSchemaRepositoryInterface $schema_repository */
  $schema_repository = \Drupal::service('entity.last_installed_schema.repository');
  /** @var \Drupal\Core\Entity\EntityFieldManager $entity_field_manager */
  $entity_field_manager = \Drupal::service('entity_field.manager');
  $base_field_definitions = $entity_field_manager->getBaseFieldDefinitions($entity_type_id);
  $schema_repository->setLastInstalledFieldStorageDefinition($base_field_definitions[$field_name]);
  $field_storage_definitions = $schema_repository->getLastInstalledFieldStorageDefinitions($entity_type_id);
  $field_storage_definitions[$field_name]['schema'] = $field_storage_definitions[$field_name]->getSchema();
  $field_storage_definitions[$field_name]['schema']['columns']['value']['length'] = $field_length;
  $schema_repository->setLastInstalledFieldStorageDefinitions($entity_type_id, $field_storage_definitions);
  $is_revisionable = $field_storage_definitions[$field_name]->isRevisionable();

  // Update the storage schema.
  $key_value = \Drupal::keyValue('entity.storage_schema.sql');
  $key_name = $entity_type_id . '.field_schema_data.' . $field_name;
  $storage_schema = $key_value->get($key_name);
  $storage_schema[$entity_type_id . '_data']['fields'][$field_name]['length'] = $field_length;
  if ($is_revisionable) {
    $storage_schema[$entity_type_id . '_revision']['fields'][$field_name]['length'] = $field_length;
  }
  $key_value->set($key_name, $storage_schema);

  // Update the base database field.
  $db_schema = Database::getConnection()->schema();
  $db_schema->changeField($entity_type_id, $field_name, $field_name, [
    'type' => 'varchar',
    'length' => $field_length,
    'not null' => !empty($storage_schema[$entity_type_id]['fields'][$field_name]['not null']),
    'default' => $default_value,
  ]);

  // Update the revision database field.
  if ($is_revisionable) {
    $db_schema->changeField($entity_type_id . '_revision', $field_name, $field_name, [
      'type' => 'varchar',
      'length' => $field_length,
      'not null' => !empty($storage_schema[$entity_type_id]['fields'][$field_name]['not null']),
      'default' => $default_value,
    ]);
  }
}

/**
 * Change length of Eventbrite Events Attendee fields.
 */
function eventbrite_events_update_8001(&$sandbox) {
  // Existing fields with updated length
  $updated_fields = ['name', 'email', 'company', 'job_title', 'ticket_class_id', 'attendee_status'];

  foreach ($updated_fields as $field) {
    db_change_varchar_field('eventbrite_events_attendee', $field, 255);
  }

  // Truncate attendee database.
  // @todo - fix this abomination
  $database = \Drupal::database();
  $database->query("TRUNCATE TABLE eventbrite_events_attendee");

  // Run entity updates
  try {
    echo "Running entity updates... \n";
    $entityUpdateManager = \Drupal::service('entity.definition_update_manager');
    $entityUpdateManager->applyUpdates();
  }
  catch (EntityStorageException $e) {
    print_r($e);
  }

  // Resync attendees
  \Drupal::moduleHandler()->invoke('eventbrite_events', 'cron');
}
